---
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/Navbar.astro";
---
<Layout title="Tool Usage">
    <Navbar />
    <main>
        <h1><center>Tool Usage Guide</center></h1>
		<h2><span class="text-gradient">BrickLink Studio</span><br> Bricklink is a digital building software program specialized 
		in using virtual parts to build anything. Using Windows and mac, bricklinks can show you what part colors are available 
		and their tracking cost. Furthermore, it iscompletely free and it is a great program that’ll let you design, build and create 
		digitally. The Brick library is a very extensive list of lego bricks and pieces which makes it very easy to use in order 
		to build pretty much anything and even difficult builds. <br><br>
		The software is compatible with BrickLink, an online marketplace for buying and selling Lego bricks, so users can easily 
		find and purchase the pieces they need to build their models. Once a model is complete, users can generate step-by-step 
		building instructions, which can be printed or shared online. <br><br><br>

		When you are finally working in BrickLink studio, you are posed with the query of which lego set you would like to import as a 
		collection of bricks to use instead of as an assembled set. Once you have selected your set of choices, the application will 
		spawn many bricks in an organized grid, allowing you to better see and visually separate the presented bricks. <br><br>
		From then on, you are able to begin constructing your lego build. The application comes built-in with several smart building 
		systems, which not only allow you to build more intricate sets and designs but also offer you a more deep selection of 
		functionality, including pieces snapping together on certain amounts of studs, improved design rotation, and a flurry of in 
		depth documentation for their more complicated functions, which are most likely going to be unused or unusable for the less 
		advanced or less habituated developer.<br><br><br>

		<span class="text-gradient">EV3 Dev</span><br>EV3 Dev is an open-source programming environment for the LEGO MINDSTORMS EV3 robot. It is a free and powerful 
		alternative to the standard LEGO MINDSTORMS programming software that comes with the EV3 set.<br><br>
		EV3 Dev provides more advanced programming features and greater flexibility than the standard software. It is based on the 
		Linux operating system and provides access to the full range of features of the EV3 hardware, including the sensors, motors, 
		and other components.<br><br>
		With EV3 Dev, you can use a variety of programming languages, including C++, Python, and Java, to create sophisticated 
		and complex programs for your EV3 robot. You can also take advantage of a range of third-party libraries and tools to 
		extend the capabilities of your robot.<br><br>
		EV3 Dev is designed for advanced users and developers who are comfortable working with Linux and command-line interfaces. 
		It requires some technical expertise to set up and use, but it offers a powerful and flexible platform for creating and 
		exploring new robotics projects.<br><br><br>
			
		EV3 Dev, thankfully, is a coding process that functions using python. This allows for a simplistic formatting that makes it 
		much easier to understand for students and young developers.<br><br>
		For the most part, the best way to start coding in it is to connect your EV3 Mindstorm robot before beginning to code. This 
		makes it easier for you to code and test your robot, because you won’t have to reconnect it everytime you want to test it.<br><br>
		From that point on, you are free to begin coding. Most start by declaring their drivebase as a variable, allowing the database 
		drive() function to control the entire drivebase, including all of the wheels.
		</h2>
    </main>
</Layout>

<style>
    h1 {
		font-size: 5rem;
		font-weight: 800;
		margin: 0;
	}
	h2 {
		font-size: 1rem;
		font-weight: 500;
		background-color: white;
		height: 1000;
		width: 98.3%;
		border-radius: 12px;
		padding: 12px;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
</style>
